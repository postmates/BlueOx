#!/bin/python
import argparse
import sys
import logging
import json

from datetime import datetime

import blueox.client
from blueox.utils import get_deep

log = logging.getLogger('blueox.view')


def setup_logging(options):
    if len(options.verbose) > 1:
        level = logging.DEBUG
    elif options.verbose:
        level = logging.INFO
    else:
        level = logging.WARNING

    log_format = "%(asctime)s %(levelname)s:%(name)s: %(message)s"
    logging.basicConfig(level=level, format=log_format, stream=sys.stdout)


def print_pretty_header(entity):
    print
    try:
        duration = (entity['end'] - entity['start'])
        if duration < 2:
            duration_str = "%d ms" % round(duration * 1000)
        else:
            duration_str = "%.1f s" % duration
        timestamp_str = datetime.fromtimestamp(
            entity['end']).strftime('%Y-%m-%d %H:%M:%S')

        print "== %s | %s | %s@%s:%s (%s)" % (
            timestamp_str,
            entity['type'],
            entity['id'][:12],
            entity['host'],
            entity['pid'],
            duration_str)

    except KeyError:
        print "=== %s (%s)" % (entity['type'], entity['id'])


class FilteredStream(object):
    def __init__(self, key_path, val, stream):
        self.stream = stream
        self.key_path = key_path
        self.val = val

    def __iter__(self):
        for event in self.stream:
            if get_deep(event, self.key_path) == self.val:
                yield event

        raise StopIteration


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v',
                        dest='verbose',
                        action='append_const',
                        const=True,
                        default=list())

    parser.add_argument(
        '--type-name', '-n',
        dest='type_name',
        action='store',
        default=None,
        help=(
            "What event types to display. Can end with '*'"
            " for prefix matches."))

    parser.add_argument('--host', '-H',
                        dest='host',
                        action='store',
                        default=None)
    parser.add_argument('--log-path', '-l',
                        dest='log_path',
                        action='store',
                        default=None)
    parser.add_argument('--pretty', '-p',
                        dest='pretty',
                        action='store_true',
                        default=False)
    parser.add_argument('--group',
                        dest='group',
                        action='store_true',
                        default=False)
    parser.add_argument('--filter',
                        dest='filter',
                        action='store',
                        default=None,
                        help='ex. --filter=body.customer.name:"Sara"')

    options = parser.parse_args()

    setup_logging(options)

    # We don't want to rely just on isatty because managed environments like
    # upstart might not give you a tty either.
    if sys.stdin.isatty() or options.host:
        log.info("Loading stream from oxd")

        host = blueox.client.default_host(options.host)

        out_stream = blueox.client.subscribe_stream(host, options.type_name)
    else:
        if options.type_name is not None:
            parser.error("Can't specify a name from stdin")
            sys.exit(1)

        log.info("Loading stream from stdin")
        out_stream = blueox.client.stdin_stream()

    if options.group:
        out_stream = blueox.client.Grouper(out_stream)

    if options.filter:
        key_path, val = options.filter.split(':')
        val = json.loads(val)
        out_stream = FilteredStream(key_path, val, out_stream)

    for line in out_stream:
        if options.pretty:
            print_pretty_header(line)
            print json.dumps(line,
                             sort_keys=True,
                             indent=4,
                             separators=(',', ': '))
        else:
            print json.dumps(line)


if __name__ == '__main__':
    try:
        main()
    except (KeyboardInterrupt, SystemExit):
        pass
